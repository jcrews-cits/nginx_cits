name: Build NGINX Package

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write  # Grants permission to create releases and modify repository content

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Read version from file
        id: read_version
        run: |
          VERSION=$(cat VERSION)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          RELEASE=$(cat RELEASE)
          echo "RELEASE=$RELEASE" >> $GITHUB_ENV

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev libpcre3-dev zlib1g-dev libgeoip-dev libgd-dev libxml2-dev libxslt1-dev libperl-dev libatomic-ops-dev
          sudo gem install fpm

      - name: Download NGINX source code
        run: |
          echo "Downloading NGINX version: ${{ env.VERSION }}"
          curl -f -O http://nginx.org/download/nginx-${{ env.VERSION }}.tar.gz || { echo "Failed to download NGINX version ${{ env.VERSION }}"; exit 1; }
          ls -l nginx-${{ env.VERSION }}.tar.gz
          tar -xzvf nginx-${{ env.VERSION }}.tar.gz || { echo "Extraction failed"; exit 1; }

      - name: Install GeoIP2 Dependencies
        run: |
          sudo apt-get install -y libmaxminddb-dev mmdb-bin

      - name: Download ngx_http_geoip2_module
        run: |
          git clone https://github.com/leev/ngx_http_geoip2_module.git

      - name: Install Dependencies for VTS Module
        run: |
          sudo apt-get install -y libpcre3 libpcre3-dev

      - name: Download nginx-module-vts
        run: |
          git clone https://github.com/vozlt/nginx-module-vts.git

      - name: Download nginx-module-sts
        run: |
          git clone https://github.com/vozlt/nginx-module-sts.git

      - name: Download nginx-module-stream-sts
        run: |
          git clone https://github.com/vozlt/nginx-module-stream-sts.git

      - name: Download ngx_cache_purge module
        run: |
          git clone https://github.com/FRiCKLE/ngx_cache_purge.git

      - name: Configure NGINX
        run: |
          cd nginx-${{ env.VERSION }}
          ./configure \
            --with-cc-opt="-g -O2 -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer -ffile-prefix-map=/build/nginx-z26Olq/nginx-${{ env.VERSION }}=. -flto=auto -ffat-lto-objects -fstack-protector-strong -fstack-clash-protection -Wformat -Werror=format-security -fcf-protection -fdebug-prefix-map=/build/nginx-z26Olq/nginx-${{ env.VERSION }}=/usr/src/nginx-${{ env.VERSION }}-1 -fPIC -Wdate-time" \
            --with-ld-opt="-Wl,-Bsymbolic-functions -flto=auto -ffat-lto-objects -Wl,-z,relro -Wl,-z,now -fPIC" \
            --prefix=/etc/nginx \
            --conf-path=/etc/nginx/nginx.conf \
            --http-log-path=/var/log/nginx/access.log \
            --error-log-path=stderr \
            --lock-path=/var/lock/nginx.lock \
            --pid-path=/run/nginx.pid \
            --modules-path=/usr/lib/nginx/modules \
            --http-client-body-temp-path=/var/lib/nginx/body \
            --http-fastcgi-temp-path=/var/lib/nginx/fastcgi \
            --http-proxy-temp-path=/var/lib/nginx/proxy \
            --http-scgi-temp-path=/var/lib/nginx/scgi \
            --http-uwsgi-temp-path=/var/lib/nginx/uwsgi \
            --with-compat \
            --with-debug \
            --with-pcre-jit \
            --with-file-aio \
            --with-threads \
            --with-pcre \
            --with-libatomic \
            --with-http_degradation_module \
            --with-http_stub_status_module \
            --with-http_addition_module  \
            --with-http_auth_request_module \
            --with-http_dav_module \
            --with-http_flv_module \
            --with-http_gunzip_module \
            --with-http_gzip_static_module \
            --with-http_mp4_module \
            --with-http_random_index_module \
            --with-http_realip_module \
            --with-http_secure_link_module \
            --with-http_slice_module \
            --with-http_ssl_module \
            --with-http_stub_status_module \
            --with-http_sub_module \
            --with-http_v2_module \
            --with-http_v3_module \
            --with-mail \
            --with-mail_ssl_module \
            --with-stream \
            --with-stream_geoip_module \
            --with-stream_realip_module \
            --with-stream_ssl_module \
            --with-stream_ssl_preread_module \
            --with-http_geoip_module \
            --with-http_image_filter_module \
            --with-http_perl_module \
            --with-http_xslt_module \
            --add-module=../ngx_cache_purge \
            --add-module=../ngx_http_geoip2_module \
            --add-module=../nginx-module-vts \
            --add-module=../nginx-module-sts \
            --add-module=../nginx-module-stream-sts

      - name: Build NGINX
        run: |
          cd nginx-${{ env.VERSION }}
          sudo make
          sudo make modules
          sudo make install

      - name: Set Permissions for NGINX Directory
        run: sudo chmod -R 755 /etc/nginx

      - name: Create Temporary Directory
        run: mkdir -p /home/runner/work/nginx_cits/nginx_cits/tmp

      - name: Create NGINX Systemd Service File
        run: |
          echo "[Unit]
          Description=A high performance web server and a reverse proxy server
          Documentation=https://nginx.org/en/docs/
          After=network.target nss-lookup.target

          [Service]
          Type=forking
          PIDFile=/run/nginx.pid
          ExecStartPre=/usr/sbin/nginx -t -q -g 'daemon on; master_process on;'
          ExecStart=/usr/sbin/nginx -g 'daemon on; master_process on;'
          ExecReload=/usr/sbin/nginx -s reload
          ExecStop=/bin/kill -s QUIT \$MAINPID

          PrivateTmp=true
          ProtectSystem=full
          ProtectHome=true
          NoNewPrivileges=true
          RestrictAddressFamilies=AF_INET AF_INET6 AF_UNIX

          [Install]
          WantedBy=multi-user.target" | sudo tee /etc/systemd/system/nginx.service

      - name: Create Logrotate Configuration
        run: |
          echo "/var/log/nginx/*.log {
              daily
              missingok
              rotate 14
              compress
              delaycompress
              notifempty
              create 0640 www-data adm
              sharedscripts
              postrotate
                  [ -f /run/nginx.pid ] && kill -USR1 `cat /run/nginx.pid`
              endscript
          }" | sudo tee /etc/logrotate.d/nginx

      - name: Create Post-Install Script
        run: |
          echo "#!/bin/bash
          systemctl daemon-reload
          systemctl enable nginx" | sudo tee post-install
          sudo chmod +x post-install

      - name: Create Output Directory
        run: mkdir -p /home/runner/work/nginx_cits/nginx_cits

      - name: Package NGINX with FPM
        run: |
          sudo fpm -s dir -t deb -n nginx -v ${{ env.VERSION }} \
            --post-install ./post-install \
            -C / \
            -p /home/runner/work/nginx_cits/nginx_cits/nginx-${{ env.VERSION }}-${{ env.RELEASE }}-cits.deb \
            /etc/nginx /usr/sbin/nginx /usr/lib/nginx/modules /etc/logrotate.d/nginx /etc/systemd/system/nginx.service
        env:
          PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
          TMPDIR: /home/runner/work/nginx_cits/nginx_cits/tmp

      - name: Check if .deb Package Exists
        run: |
          ls -l /home/runner/work/nginx_cits/nginx_cits/nginx-${{ env.VERSION }}-${{ env.RELEASE }}-cits.deb || { echo "Package not found"; exit 1; }

      - name: Upload Package Artifact
        uses: actions/upload-artifact@v3
        with:
          name: "nginx-${{ env.VERSION }}-${{ env.RELEASE }}-cits.deb"
          path: "/home/runner/work/nginx_cits/nginx_cits/nginx-${{ env.VERSION }}-${{ env.RELEASE }}-cits.deb"


#      - name: Create GitHub Release
#        id: create_release  # ID for reference in the next step
#        uses: actions/create-release@v1
#        with:
#          tag_name: v${{ env.VERSION }}
#          release_name: NGINX v${{ env.VERSION }}
#          body: Release of NGINX version ${{ env.VERSION }}
#          draft: false
#          prerelease: false
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#      - name: Upload Release Asset
#        uses: actions/upload-release-asset@v1
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: /home/runner/work/nginx_cits/nginx_cits/nginx-${{ env.VERSION }}.deb
#          asset_name: nginx-${{ env.VERSION }}.deb
#          asset_content_type: application/octet-stream
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
